2023-08-08 02:17:00:500 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-08 02:17:00:514 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-08 02:17:00:876 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (BLOCK (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr)) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr)) (ALT (= left expr) AND (= right expr)) (ALT (= left expr) OR (= right expr)) (ALT PARIZQ expr PARDER) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })))))
2023-08-08 02:17:00:879 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (BLOCK (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr)) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr)) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr)) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr)) (ALT (= left expr) AND (= right expr)) (ALT (= left expr) OR (= right expr)) (ALT PARIZQ expr PARDER) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })))))
2023-08-08 02:17:00:882 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (BLOCK (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr)) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr)) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr)) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr)) (ALT (= left expr) AND (= right expr)) (ALT (= left expr) OR (= right expr)) (ALT PARIZQ expr PARDER) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })))))
2023-08-08 02:17:00:882 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-08-08 02:17:00:910 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} PARIZQ<tokenIndex=244> expr<tokenIndex=246> PARDER<tokenIndex=248> 
        | NUMBER<tokenIndex=252>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=258>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=264> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=270> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(MUL<tokenIndex=135>|DIV<tokenIndex=137>) right=expr<tokenIndex=142,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(ADD<tokenIndex=155>|SUB<tokenIndex=157>) right=expr<tokenIndex=162,p=12>
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=(MAY_IG<tokenIndex=173>|MAYOR<tokenIndex=175>) right=expr<tokenIndex=180,p=11>
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=(MEN_IG<tokenIndex=191>|MENOR<tokenIndex=193>) right=expr<tokenIndex=198,p=10>
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> op=(IG_IG<tokenIndex=209>|DIF<tokenIndex=211>) right=expr<tokenIndex=216,p=9>
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> AND<tokenIndex=224> right=expr<tokenIndex=228,p=8>
                  | {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> OR<tokenIndex=236> right=expr<tokenIndex=240,p=7>
        )*
    ;
2023-08-08 02:17:00:929 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 244))) (expr (ELEMENT_OPTIONS (= tokenIndex 246))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 248)))) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 252))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 258))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 264))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 270))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 135))) (DIV (ELEMENT_OPTIONS (= tokenIndex 137))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 142) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 155))) (SUB (ELEMENT_OPTIONS (= tokenIndex 157))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 162) (= p 12))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 173))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 175))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 180) (= p 11))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 191))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 193))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 198) (= p 10))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 209))) (DIF (ELEMENT_OPTIONS (= tokenIndex 211))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 216) (= p 9))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (AND (ELEMENT_OPTIONS (= tokenIndex 224))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 228) (= p 8))))) (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (OR (ELEMENT_OPTIONS (= tokenIndex 236))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 240) (= p 7))))))))))
2023-08-08 02:17:00:939 grammar LogManager.java:25 import INT=1
2023-08-08 02:17:00:939 grammar LogManager.java:25 import FLOAT=2
2023-08-08 02:17:00:939 grammar LogManager.java:25 import BOOL=3
2023-08-08 02:17:00:939 grammar LogManager.java:25 import TRU=4
2023-08-08 02:17:00:939 grammar LogManager.java:25 import FAL=5
2023-08-08 02:17:00:939 grammar LogManager.java:25 import PRINT=6
2023-08-08 02:17:00:939 grammar LogManager.java:25 import IF=7
2023-08-08 02:17:00:941 grammar LogManager.java:25 import ELSE=8
2023-08-08 02:17:00:941 grammar LogManager.java:25 import WHILE=9
2023-08-08 02:17:00:941 grammar LogManager.java:25 import NUMBER=10
2023-08-08 02:17:00:941 grammar LogManager.java:25 import STRING=11
2023-08-08 02:17:00:941 grammar LogManager.java:25 import ID=12
2023-08-08 02:17:00:941 grammar LogManager.java:25 import DIF=13
2023-08-08 02:17:00:941 grammar LogManager.java:25 import IG_IG=14
2023-08-08 02:17:00:941 grammar LogManager.java:25 import NOT=15
2023-08-08 02:17:00:941 grammar LogManager.java:25 import OR=16
2023-08-08 02:17:00:941 grammar LogManager.java:25 import AND=17
2023-08-08 02:17:00:941 grammar LogManager.java:25 import IG=18
2023-08-08 02:17:00:941 grammar LogManager.java:25 import MAY_IG=19
2023-08-08 02:17:00:941 grammar LogManager.java:25 import MEN_IG=20
2023-08-08 02:17:00:941 grammar LogManager.java:25 import MAYOR=21
2023-08-08 02:17:00:941 grammar LogManager.java:25 import MENOR=22
2023-08-08 02:17:00:941 grammar LogManager.java:25 import MUL=23
2023-08-08 02:17:00:941 grammar LogManager.java:25 import DIV=24
2023-08-08 02:17:00:941 grammar LogManager.java:25 import ADD=25
2023-08-08 02:17:00:941 grammar LogManager.java:25 import SUB=26
2023-08-08 02:17:00:941 grammar LogManager.java:25 import PARIZQ=27
2023-08-08 02:17:00:941 grammar LogManager.java:25 import PARDER=28
2023-08-08 02:17:00:941 grammar LogManager.java:25 import LLAVEIZQ=29
2023-08-08 02:17:00:941 grammar LogManager.java:25 import LLAVEDER=30
2023-08-08 02:17:00:941 grammar LogManager.java:25 import WHITESPACE=31
2023-08-08 02:17:00:941 grammar LogManager.java:25 import COMMENT=32
2023-08-08 02:17:00:941 grammar LogManager.java:25 import LINE_COMMENT=33
2023-08-08 02:17:00:941 grammar LogManager.java:25 import 'int'=1
2023-08-08 02:17:00:941 grammar LogManager.java:25 import 'float'=2
2023-08-08 02:17:00:941 grammar LogManager.java:25 import 'bool'=3
2023-08-08 02:17:00:941 grammar LogManager.java:25 import 'true'=4
2023-08-08 02:17:00:941 grammar LogManager.java:25 import 'false'=5
2023-08-08 02:17:00:941 grammar LogManager.java:25 import 'print'=6
2023-08-08 02:17:00:941 grammar LogManager.java:25 import 'if'=7
2023-08-08 02:17:00:941 grammar LogManager.java:25 import 'else'=8
2023-08-08 02:17:00:941 grammar LogManager.java:25 import 'while'=9
2023-08-08 02:17:00:941 grammar LogManager.java:25 import '!='=13
2023-08-08 02:17:00:943 grammar LogManager.java:25 import '=='=14
2023-08-08 02:17:00:943 grammar LogManager.java:25 import '!'=15
2023-08-08 02:17:00:943 grammar LogManager.java:25 import '||'=16
2023-08-08 02:17:00:943 grammar LogManager.java:25 import '&&'=17
2023-08-08 02:17:00:943 grammar LogManager.java:25 import '='=18
2023-08-08 02:17:00:943 grammar LogManager.java:25 import '>='=19
2023-08-08 02:17:00:943 grammar LogManager.java:25 import '<='=20
2023-08-08 02:17:00:943 grammar LogManager.java:25 import '>'=21
2023-08-08 02:17:00:943 grammar LogManager.java:25 import '<'=22
2023-08-08 02:17:00:943 grammar LogManager.java:25 import '*'=23
2023-08-08 02:17:00:943 grammar LogManager.java:25 import '/'=24
2023-08-08 02:17:00:943 grammar LogManager.java:25 import '+'=25
2023-08-08 02:17:00:943 grammar LogManager.java:25 import '-'=26
2023-08-08 02:17:00:943 grammar LogManager.java:25 import '('=27
2023-08-08 02:17:00:943 grammar LogManager.java:25 import ')'=28
2023-08-08 02:17:00:943 grammar LogManager.java:25 import '{'=29
2023-08-08 02:17:00:943 grammar LogManager.java:25 import '}'=30
2023-08-08 02:17:00:943 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, TRU=4, FAL=5, PRINT=6, IF=7, ELSE=8, WHILE=9, NUMBER=10, STRING=11, ID=12, DIF=13, IG_IG=14, NOT=15, OR=16, AND=17, IG=18, MAY_IG=19, MEN_IG=20, MAYOR=21, MENOR=22, MUL=23, DIV=24, ADD=25, SUB=26, PARIZQ=27, PARDER=28, LLAVEIZQ=29, LLAVEDER=30, WHITESPACE=31, COMMENT=32, LINE_COMMENT=33, 'int'=1, 'float'=2, 'bool'=3, 'true'=4, 'false'=5, 'print'=6, 'if'=7, 'else'=8, 'while'=9, '!='=13, '=='=14, '!'=15, '||'=16, '&&'=17, '='=18, '>='=19, '<='=20, '>'=21, '<'=22, '*'=23, '/'=24, '+'=25, '-'=26, '('=27, ')'=28, '{'=29, '}'=30}
2023-08-08 02:17:00:943 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, TRU=4, FAL=5, PRINT=6, IF=7, ELSE=8, WHILE=9, NUMBER=10, STRING=11, ID=12, DIF=13, IG_IG=14, NOT=15, OR=16, AND=17, IG=18, MAY_IG=19, MEN_IG=20, MAYOR=21, MENOR=22, MUL=23, DIV=24, ADD=25, SUB=26, PARIZQ=27, PARDER=28, LLAVEIZQ=29, LLAVEDER=30, WHITESPACE=31, COMMENT=32, LINE_COMMENT=33}
2023-08-08 02:17:00:946 semantics LogManager.java:25 strings={'int'=1, 'float'=2, 'bool'=3, 'true'=4, 'false'=5, 'print'=6, 'if'=7, 'else'=8, 'while'=9, '!='=13, '=='=14, '!'=15, '||'=16, '&&'=17, '='=18, '>='=19, '<='=20, '>'=21, '<'=22, '*'=23, '/'=24, '+'=25, '-'=26, '('=27, ')'=28, '{'=29, '}'=30}
2023-08-08 02:17:00:973 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-08 02:17:00:974 LL1 LogManager.java:25 look=[{6..7}, {<EOF>, 30}]
2023-08-08 02:17:00:974 LL1 LogManager.java:25 LL(1)? true
2023-08-08 02:17:00:974 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-08 02:17:00:974 LL1 LogManager.java:25 look=[6, 7]
2023-08-08 02:17:00:974 LL1 LogManager.java:25 LL(1)? true
2023-08-08 02:17:00:974 LL1 LogManager.java:25 
DECISION 2 in rule expr
2023-08-08 02:17:00:974 LL1 LogManager.java:25 look=[27, 10, 11, 4, 5]
2023-08-08 02:17:00:974 LL1 LogManager.java:25 LL(1)? true
2023-08-08 02:17:00:975 LL1 LogManager.java:25 
DECISION 3 in rule expr
2023-08-08 02:17:00:975 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-08 02:17:00:975 LL1 LogManager.java:25 LL(1)? false
2023-08-08 02:17:00:975 LL1 LogManager.java:25 
DECISION 4 in rule expr
2023-08-08 02:17:00:975 LL1 LogManager.java:25 look=[null, null]
2023-08-08 02:17:00:975 LL1 LogManager.java:25 LL(1)? false
2023-08-08 02:17:00:978 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-08 02:17:00:994 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-08 02:17:00:994 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-08-08 02:17:00:996 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-08-08 02:17:00:998 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-08 02:17:00:999 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-08-08 02:17:01:001 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-08 02:17:01:001 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-08-08 02:17:01:001 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-08-08 02:17:01:001 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-08 02:17:01:001 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-08-08 02:17:01:001 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-08-08 02:17:01:001 action-translator LogManager.java:25 translate  
2023-08-08 02:17:01:003 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-08 02:17:01:003 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,44:29]
2023-08-08 02:17:01:004 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,44:59].[@-1,38:41='line',<0>,44:65]
2023-08-08 02:17:01:004 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,44:71].[@-1,50:52='pos',<0>,44:77]
2023-08-08 02:17:01:004 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,44:82].[@-1,60:60='e',<0>,44:87]
2023-08-08 02:17:01:004 action-translator LogManager.java:25 translate 
2023-08-08 02:17:01:004 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-08 02:17:01:004 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,5:30].[@-1,39:42='text',<0>,5:37]
2023-08-08 02:17:01:004 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,6:43].[@-1,102:105='text',<0>,6:50]
2023-08-08 02:17:01:010 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,10:13]
2023-08-08 02:17:01:010 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,10:43].[@-1,240:243='line',<0>,10:50]
2023-08-08 02:17:01:011 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,10:56].[@-1,253:255='pos',<0>,10:63]
2023-08-08 02:17:01:011 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,12:37].[@-1,341:344='text',<0>,12:44]
2023-08-08 02:17:01:011 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,16:13]
2023-08-08 02:17:01:011 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,16:43].[@-1,474:477='line',<0>,16:50]
2023-08-08 02:17:01:011 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,16:56].[@-1,487:489='pos',<0>,16:63]
2023-08-08 02:17:01:011 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-08 02:17:01:013 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,21:16].[@-1,25:28='text',<0>,21:23]
2023-08-08 02:17:01:013 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,22:9]
2023-08-08 02:17:01:013 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,22:39].[@-1,77:80='line',<0>,22:46]
2023-08-08 02:17:01:013 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,22:53].[@-1,91:93='pos',<0>,22:60]
2023-08-08 02:17:01:013 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-08 02:17:01:013 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,24:32]
2023-08-08 02:17:01:013 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,24:62].[@-1,36:39='line',<0>,24:66]
2023-08-08 02:17:01:013 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,24:73].[@-1,47:49='pos',<0>,24:77]
2023-08-08 02:17:01:014 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-08 02:17:01:014 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,25:32]
2023-08-08 02:17:01:014 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,25:62].[@-1,36:39='line',<0>,25:66]
2023-08-08 02:17:01:015 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,25:73].[@-1,47:49='pos',<0>,25:77]
2023-08-08 02:17:01:017 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-08 02:17:01:017 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-08 02:17:01:017 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,28:139]
2023-08-08 02:17:01:017 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,28:169].[@-1,37:41='start',<0>,28:174]
2023-08-08 02:17:01:017 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,28:192].[@-1,60:64='start',<0>,28:197]
2023-08-08 02:17:01:017 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,28:217].[@-1,85:85='e',<0>,28:222]
2023-08-08 02:17:01:017 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,28:226].[@-1,92:95='text',<0>,28:229]
2023-08-08 02:17:01:017 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,28:236].[@-1,105:105='e',<0>,28:242]
2023-08-08 02:17:01:017 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-08 02:17:01:019 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-08 02:17:01:019 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-08 02:17:01:019 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-08 02:17:01:019 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-08-08 02:17:01:020 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2023-08-08 02:17:01:023 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-08 02:17:01:023 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-08 02:17:01:023 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-08 02:17:01:023 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-08 02:17:01:023 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-08 02:17:01:023 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-08-08 02:17:01:023 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2023-08-08 02:17:01:164 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-08 02:17:01:164 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-08 02:17:01:208 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-08 02:17:01:208 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

